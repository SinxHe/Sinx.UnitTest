/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ThriftFlumeEvent : TBase
{

  public Dictionary<string, string> Headers { get; set; }

  public byte[] Body { get; set; }

  public ThriftFlumeEvent() {
  }

  public ThriftFlumeEvent(Dictionary<string, string> headers, byte[] body) : this() {
    this.Headers = headers;
    this.Body = body;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_headers = false;
      bool isset_body = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                Headers = new Dictionary<string, string>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  string _key2;
                  string _val3;
                  _key2 = iprot.ReadString();
                  _val3 = iprot.ReadString();
                  Headers[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
              isset_headers = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Body = iprot.ReadBinary();
              isset_body = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_headers)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_body)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ThriftFlumeEvent");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "headers";
      field.Type = TType.Map;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.String, TType.String, Headers.Count));
        foreach (string _iter4 in Headers.Keys)
        {
          oprot.WriteString(_iter4);
          oprot.WriteString(Headers[_iter4]);
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
      field.Name = "body";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteBinary(Body);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ThriftFlumeEvent(");
    __sb.Append(", Headers: ");
    __sb.Append(Headers);
    __sb.Append(", Body: ");
    __sb.Append(Body);
    __sb.Append(")");
    return __sb.ToString();
  }

}

